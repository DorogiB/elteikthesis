
Lorem ipsum dolor sit amet, consectetur adipiscing elit. Duis nibh leo, dapibus in elementum nec, aliquet id sem. Suspendisse potenti. Nullam sit amet consectetur nibh. Donec scelerisque varius turpis at tincidunt.


\section{Tételek, definíciók, megjegyzések}

\begin{definition}
Mauris tristique sollicitudin ultrices. Etiam tristique quam sit amet metus dictum imperdiet. Nunc id lorem sed nisl pulvinar aliquet vitae quis arcu. Morbi iaculis eleifend porttitor.
\end{definition}

Maecenas rutrum eros sem, pharetra interdum nulla porttitor sit amet. In vitae viverra ante. Maecenas sit amet placerat orci, sed tincidunt velit. Vivamus mattis, enim vel suscipit elementum, quam odio venenatis elit, et mollis nulla nunc a risus. Praesent purus magna, tristique sed lacus sit amet, convallis malesuada magna. Phasellus faucibus varius purus, nec tristique enim porta vitae.

\begin{theorem}
Nulla finibus ante vel arcu tincidunt, ut consectetur ligula finibus. Mauris mollis lectus sed ipsum bibendum, ac ultrices erat dictum. Suspendisse faucibus euismod lacinia. Etiam vel odio ante.
\end{theorem}
\begin{proof}
Etiam pulvinar nibh quis massa auctor congue. Pellentesque quis odio vitae sapien molestie vestibulum sit amet et quam. Pellentesque vel dui eget enim hendrerit finibus at sit amet libero. Quisque sollicitudin ultrices enim, nec porta magna imperdiet vitae. Cras condimentum nunc dui.
\end{proof}

Donec dapibus sodales ante, at scelerisque nunc laoreet sit amet. Mauris porttitor tincidunt neque, vel ullamcorper neque pulvinar et. Integer eu lorem euismod, faucibus lectus sed, accumsan felis. 

\begin{remark}
Nunc ornare mi at augue vulputate, eu venenatis magna mollis. Nunc sed posuere dui, et varius nulla. Sed mollis nibh augue, eget scelerisque eros ornare nec. Praesent porta, metus eget eleifend consequat, eros ligula eleifend ex, a pellentesque mi est vitae urna. Vivamus turpis nunc, iaculis non leo eget, mattis vulputate tellus.
\end{remark}

Fusce in aliquet neque, in pretium sem. Donec tincidunt tellus id lectus pretium fringilla. Nunc faucibus, erat pretium tempus tempor, tortor mi fringilla neque, ac congue ex dui vitae mauris. Donec pretium et quam a cursus.

\begin{note}
Aliquam vehicula luctus mi a pretium. Nulla quam neque, maximus nec velit in, aliquam mollis tortor. Aliquam erat volutpat. Curabitur vitae laoreet turpis. Integer id diam ligula.
\end{note}

Ut sollicitudin tempus urna et mollis. Aliquam et aliquam turpis, sed fermentum mauris. Nulla eget ex diam. Donec eget tellus pharetra, semper neque eget, rutrum diam.

\subsection{Egyenletek, matematika}

Duis suscipit ipsum nec urna blandit, $2 + 2 = 4$ pellentesque vehicula quam fringilla. Vivamus euismod, lectus sit amet euismod viverra, dolor metus consequat sapien, ut hendrerit nisl nulla id nisi. Nam in leo eu quam sollicitudin semper a quis velit.

$$a^2 + b^2 = c^2$$

Phasellus mollis, elit sed convallis feugiat, dolor quam dapibus nibh, suscipit consectetur lacus risus quis sem. Vivamus scelerisque porta odio, vitae euismod dolor accumsan ut.

In mathematica, identitatem Euleri (equation est scriptor vti etiam notum) sit aequalitatem Equation~\ref{eq:euler}:
\begin{equation}\label{eq:euler}
e^{i \times \pi} + 1 = 0
\end{equation}


\section{Forráskódok}

Nulla sodales purus id mi consequat, eu venenatis odio pharetra. Cras a arcu quam. Suspendisse augue risus, pulvinar a turpis et, commodo aliquet turpis. Nulla aliquam scelerisque mi eget pharetra. Mauris sed posuere elit, ac lobortis metus. Proin lacinia sit amet diam sed auctor. Nam viverra orci id sapien sollicitudin, a aliquam lacus suscipit. Quisque ac tincidunt leo Code~\ref{src:cpp} and \ref{src:csharp}:

\lstset{caption={Hello World in C++}, label=src:cpp}
\begin{lstlisting}[language={C++}]
#include <stdio>

int main() 
{
	int c;
	std::cout << "Hello World!" << std::endl;

	std::cout << "Press any key to exit." << std::endl;
	std::cin >> c;
	
	return 0;
}
\end{lstlisting}

\lstset{caption={Hello World in C\#}, label=src:csharp}
\begin{lstlisting}[language={[Sharp]C}]
using System;
namespace HelloWorld
{
	class Hello 
	{
		static void Main() 
		{
			Console.WriteLine("Hello World!");
			
			Console.WriteLine("Press any key to exit.");
			Console.ReadKey();
		}
	}
}
\end{lstlisting}

\subsection{Algoritmusok}

A general Interval Branch and Bound algorithm is shown in Algorithm~\ref{alg:ibb}. One of the following selection rules is applied in Step \ref{step:selrule}.\\
Példa forrása: \href{https://www.inf.u-szeged.hu/actacybernetica/}{Acta Cybernetica (ez egy link)}.

\begin{algorithm}[H]
\caption{A general interval B\&B algorithm} 
\label{alg:ibb} 
\textbf{\underline{Funct}} IBB($S,f$)
\begin{algorithmic}[1] % sorszámok megjelenítése minden n. sor előtt, most n = 1
\STATE Set the working list ${\cal L}_W$ := $\{S\}$ and the final list ${\cal L}_Q$ := $\{\}$     
\WHILE{( ${\cal L}_W \neq \emptyset$ )} \label{alg:igoend}
	\STATE  Select an interval $X$ from ${\cal L}_W$ \label{step:selrule}\COMMENT{Selection rule}  
	\STATE Compute $lbf(X)$ \COMMENT{Bounding rule}		  
	\IF[Elimination rule]{$X$ cannot be eliminated}
		\STATE Divide $X$ into $X^j,\ j=1,\dots, p$, subintervals   \COMMENT{Division rule}
		\FOR{$j=1,\ldots,p$}
			\IF[Termination rule]{$X^j$ satisfies the termination criterion}
				\STATE Store $X^j$ in ${\cal L}_W$ 
			\ELSE
				\STATE Store $X^j$ in ${\cal L}_W$ 
			\ENDIF
		\ENDFOR  
	\ENDIF
\ENDWHILE
\STATE \textbf{return} ${\cal L}_Q$
\end{algorithmic}
\end{algorithm}

\subsubsection{A QGIS API használt signaljai}
\begin{itemize}
	\item \textbf{interface.projectRead} : A projekt betöltésének eseménye, ez váltja ki a tényleges munkapéldány inicializálását
	\item \textbf{QgsProject.projectSaved} : A projekt mentésének eseménye. Mivel az újonnan felvett rétegek nem maradnak meg, amennyiben a projektet nem mentjük el, így ezt használja a program arra, hogy a rétegeket érintő szerkesztéseket véglegesnek tekintse
	\item \textbf{QgsProject.layersAdded} : A rétegek hozzáadásának eseménye a projektben, az új rétegek kezelését lehet vele biztosítani
	\item \textbf{QgsProject.layersRemoved} : Rétegek eltávolítása kezelhető általa
	\item \textbf{QgsVectorLayer.committedFeaturesAdded} : Featureök hozzáadásának véglegesítésekor használt signal, új featureök felvételekor használatos
	\item \textbf{QgsVectorLayer.committedFeaturesRemoved} : Objektumok törlésének mentésekor kiváltott jelzés.
	\item \textbf{QgsVectorLayer.committedGeometryChanges} : Geometriai adatok módosításának véglegesítésekor használt jelzés
\end{itemize}
\subsubsection{}

\section{A felhasznált külső könyvtárak}
A plugin két külső dependenciával dolgozik. Az egyik az AEGIS programcsomag, ennek is főleg a verziókezelő modulja, a másik pedig a Python .Net -amire pythonnet néven hivatkozik a legtöbb forrás- python modul, ami lehetővé teszi a dll-é fordított C\# kód használatát

\subsection{A Python .Net modul}
\begin{remark}
	Mivel az AEGIS keretrendszer C\# nyelven íródott, a QGIS-hez pedig pythonban lehet beépülő modulokat készíteni, szükség volt egy kiegészítő könyvtárra, amivel összeköthetőek a különböző technológiák. Két lehetséges jelölt volt, a Python .Net és az IronPython, mindkettő ugyanazzal a funkcionalitással rendelkezik. Az IronPython azért lett elvetve, mert az csak a python 2.7-es verziójával használható, aminek hamarosan megszűnik a támogatottsága. 
\end{remark}

A Python .Net a python programozási nyelvhez írt, nyílt forráskódú ingyenes kiegészítő könyvtár, mely lehetővé teszi, hogy a python kódon belül dll formájábn biztosított C\# osztályokat használjunk, az úgynevezett Common Language Runtime (clr) segítségével. Használatához le kell fordítani, és mellékelni kell a projekthez amiben használjuk, ez található a plugin könyvtárában lévő pythonnet mappában. Ugyan a pythonnet modul folyamatos fejlesztés és frissítés alatt áll, a Q-Aegis projektben a 2.4.0-s verzió fordított állapota van. A program készítése során felmerült az igény, hogy a telepítéssel együtt lokálsian forduljon egy új verzió belőle, de a QGIS szerkezete miatt ez nem volt járható út. 

\begin{note}
	A Python .Net fordítása közben elég furcsa problémákba lehet ütközni, ezek közül talán a legmeglepőbb az, hogy egy dependenciája miatt nem fordul le olyan operációs rendszeren, amelynek a rendszernyelve nem angol. Mivel a Microsoft Windows nem támogatja a teljes rendszernyelv átállítását ezért a fejlesztési folyamat érdekében az egész operációs rendszert le kellett cserélni egy angol nyelvű Windowsra. 
\end{note}

\subsection{Az AEGIS programcsomag}
Az AEGIS az Eötvös Lóránd Tudományegyetemen fejlesztett geoinformatikai programcsomag, amely biztosítja téradatok tárolását, feldolgozását, valamint verziókezelését is. Felépítésének köszönhetően tetszőlegesen variálható többekközt a centralizáltsága, a tároló típusa, a változások iránya is Mivel még nem volt használva erősen gyakotlati implementációban, ezért bizonyos funkcionalitások nem voltak jelen benne a projekt elkezdésekor, ezek általam lettek hozzáadva a plugin fejlesztése során.

\section{A feladat specifikálása}
A beépülő modul célja röviden a téradatok verziókezelésének megvalósítása a QGIS-en belül, ez szétválasztható a tényleges geometriamódosítások kezelésével, valamint ezek összekötése a QGIS-es reprezentációjukkal.
\subsection{A geometriaadatok kezelése}
A geometriák tárolása, betöltése, valamint eltávolításuk kezelése mind az AEGIS létező funkciói voltak a projekt kezdeténél, így a tényleges feladat, a transzformációk definiálása, és létrehozása.
Az átalakítások tervezése közben az a fő szempont, hogy a lehető legáltalánosabbak legyenek, és minden lehetséges módosítás leírható legyen véges alkalmazásukkal. Ezt a törekvét segíti az, hogy az AEGIS geometriatípusai megfelelnek a Simple Feature Access standardnak, ezáltal egy sajátos hierarchiával rendelkeznek: A pontok különálló típust képeznek, A vonalak koordináták sorozatai, amik nagyon hasonlóan viselkednek a pontokhoz, a sokszögek pedig gyűrűkkel vannak leírva, amik a vonalak speciális változatai, így az "alacsonyabb szintű" geometriák transzformációi felhasználhatóak a bonyolultabb térobjektumok átalakításainak leírásához is. Az alakzatok lehetséges változásainak megfelelő rekreálásához a következő transzformációkat szükséges definiálni:
\begin{itemize}
	\item Pont eltolása
	\item Vonal részleges vagy teljes eltolása
	\item Pont felvétele a vonalba
	\item Pont eltávolítása a vonalból
	\item Sokszög héjának módosítása
	\item Sokszögben lévő lyuk módosítása
	\item Lyuk felvétele sokszögbe
	\item Lyuk eltávolítása sokszögből
\end{itemize}
Ezeken kívül az összes több alakzatot egybefogó, úgynevezett multigeometriák változásainak leírásához szükségesek a következő műveletek:
\begin{itemize}
	\item Multigeometria egy vagy több részének módosítása a megfelelő egyedi geometria transzformációkkal
	\item Geometria hozzáadása multigeometriához
	\item Geometria eltávolítása multigeometriából
\end{itemize}
Ezen transzformációk segítségével bármilyen alapvető geometriaváltozást le lehet írni, amiket a QGIS-en belül is végre tudunk hajtani.

A transzformációk generálása egy kicsit bonyolultabb feladat, melynek során elemeznünk kell a kiindulási geometriát, és a végeredményt, ez alapján pedig létrehozni azt a transzformációgyűjteményt amit végrehajtva az eredetin, megkapjuk az újat. Itt végül a pontok esetét leszámítva -ahol mivel csak az eltolás van, és az egy egyszerű koordinátaszámítással létrehozható az az egy transzformáció- a következő algoritmus született:
\begin{enumerate}
	\item Tekintsük a ez eredeti és a módosult geometria "hosszát"
	\item A két geometria megegyező hosszú részein -ami megegyezik a "hosszaik" minimumával- hozzuk létre azokat a transzformációkat, amik az eredeti részeit az új részeknek megfelelő részekre alakítják
	\item Amennyiben az új geometria hosszabb, a régiben még nem létező részeket adjuk hozzá
	\item Amennyiben a régi geometria hosszabb, az újban már nem létező részeket töröljük ki
\end{enumerate}
Ez a módszer néha kicsit favágó megoldásnak tűnhet, viszont nem tartottam célravezetőnek, hogy a felhasználó minden egyes apró geometriamódosítását számontartsuk.

\subsection{A QGIS reprezentáció kezelése}
A fő különbség az AEGIS és a QGIS geometriákat kezelő része között az, hogy az előbbi csak a téradatot kezeli, az utóbbi viszont ezeket még rétegekre osztva jeleníti meg. Ezzel önmagában nem lenne probléma, viszont a QGIS nem rendel egyedi azonosítót a geometriákhoz, így előfordulhat, hogy két különböző rétegen azonos geometria szerepel, és módosításukkor nem tudjuk megállapítani, hogy az AEGIS-ben tárolt adatok közül melyik módosult. Ez alapján  a beépülő modulon belül megvalósítandó plusz funkciók a következőek:
\begin{itemize}
	\item A QGIS feature-ök és az AEGIS geometriák kapcsolatának nyílvántartása
	\item A QGIS műveleteinek megfeleltetése az AEGIS műveleteknek
	\item Az AEGIS-ben tárolt állapotok megjelenítése 
\end{itemize} 


\section{Az AEGIS-hez hozzáadott funkciók}
Az AEGIS általam írt kiegészítései három részre oszthatóak : A geometria transzformációkat leíró osztályok, a geometriakülönbségeket transzformációkká alakító metódusok, valamint a munkapéldány osztályának kiterjesztése olyan módon, hogy az megfelelő módon használható legyen a QGIS környezetével. Ezeken kívül voltak még minimális módosítások egyéb osztályokban, de mivel utóbbiak inkább apró kiegészítések vagy hibajavítások, nem fogom részletezni őket.

\subsection{A transzormációk}
Mielőtt kitérnék az egyes transzformációs osztályok részleteire, érdemes néhány szót ejteni arról, hogy mi is a szerepük a verziókezelésben. Az AEGIS működése során egyes geometriákhoz mindig csak egy állapotot tárol, és ezek változásait a transzformációk példányaival végzi, tehát tekinthetünk ezekre úgy, mint az alapvető műveletekre, amit egy téradaton végezhetünk. 
Egy transzformációs osztálynak az evidens konstruktoron kívül, a következő metódusokkal kell rendelkeznie:
\begin{list}{}{}
	\item $\bullet$ Execute : egy megfelelő bemeneti geometrián végrehajtja a paramétereinek megfelelő módosításokat, majd visszaadja a módosult alakzatot
	\item $\bullet$ Invert : mivel az AEGIS két irányban is képes változásokat kezelni, a transzformációnak képesnek kell lennie az ellentétes műveletét előállítani, azaz amit ha végrehajtunk egy módosított geometrián, visszakapjuk a módosítás előttit 
\end{list}
Az átalakítás adattagjai nagyban függnek attól, hogy milyen típusú geometriával dolgoznak, és mi a pontos művelet.

A rendszer kifejezetten sok féle geometria típust kezel, és típustól függően több különböző műveletet lehet leírni a módosításra, így elsőre azt gondolhatnánk, hogy számtalan transzformáció implementálására van szükség, de ezt szerencsére egyszerűsíti az, hogy a geometriák valamilyen szinten egymásból származnak.

Az átalakítások három fő csoportba oszthatók:
\begin{enumerate}
	\item $\bullet$ A geometria egy részének módosítása
	\item $\bullet$ Új rész hozzáadása a geometriához
	\item $\bullet$ A geometria egy részének törlése
\end{enumerate}

\section{A QGIS API}
A QGIS térinformatikai program több lehetőséget is biztosít beépülő modulok fejlesztésére, viszont csak a pythonban írt pluginok készítése elérhető bárki számára. A program alapvetően C++ és Qt technológiákra épül, viszont a PyQt interfészen keresztül majdnem a teljes eszközkészlet elérhető pythonnal is. A dolgozat szempontjából a geometriai rétegek és az azokon lévő objektumok kezelése a releváns, ezzel kapcsolatban a következő fogalmak a legfontosabbak:
\subsection{QGIS definíciók}
\begin{definition}
	Project : A QGIS munkaprojektje. Tulajdonságai:
\end{definition}
\begin{definition}
	Layer : A QGIS által kezelt réteg. Tulajdonságai :
	\begin{list}{}{}
		\item name: Név 
		\item id vagy layerId : Egyedi azonosító , a nevéből és egy véletlenszerűen generált karakterláncból áll elő
		\item geometryType : A rajta lévő geometriák típusa
		\item storageType : Tárolás típusa (shapefile vagy memória)
		\item crs : Referenciarendszer a korrdináták ábrázolására
	\end{list}
\end{definition}
\begin{definition}
	Feature : A rétegen lévő objektum. Tulajdonságai:
	\begin{list}{}{}
		\item geometry : Az objektum geometriája
		\item id/featureId : Az objektum azonosítója, ami a rétegen belül egyedi
	\end{list}
\end{definition}
\begin{definition}
	Geometria típusok : 
	\begin{list}{}{}
		\item Point : pont geometria
		\item MultiPoint : több különböző pontból geometria
		\item LineString : vonallánc geometria
		\item MultiLineString : több különálló vonalláncból álló geometria
		\item Polygon : tetszőleges sokszög geometria
		\item MultiPolygon : több sokszöget tartalmazó geometria
	\end{list}
\end{definition}
Fontos megemlíteni, hogy az AEGIS keretrendszer ezeknél több fajta geometriát is ismer, de ezek egyszerűen visszavezethetőek az előbb felsorolt hat típusra, például a szigorúan két pont közti egyenes vonalat leíró Line reprezentálható LineStringként, ahogyan a zárt vonal osztálya, a LinearRing is.
